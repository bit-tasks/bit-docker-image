#!/bin/bash

# Check if $BIT_CONFIG_ACCESS_TOKEN is set
if [[ -z "$BIT_CONFIG_USER_TOKEN" && -z "$BIT_CONFIG_ACCESS_TOKEN" ]]; then
    echo "Error: BIT_CONFIG_ACCESS_TOKEN environment variable is not set. It is required!"
    exit 1
fi

# Assign BIT_CONFIG_ACCESS_TOKEN to BIT_CONFIG_USER_TOKEN
if [[ -z "$BIT_CONFIG_USER_TOKEN" ]]; then
    BIT_CONFIG_USER_TOKEN="$BIT_CONFIG_ACCESS_TOKEN"
    export BIT_CONFIG_USER_TOKEN
fi

# Load variables from ws.env file
source /tmp/ws.env

# Disable git terminal prompt to prevent the script from getting stuck waiting for input
export GIT_TERMINAL_PROMPT=0

# Helper function to check if a value exists in an array.
contains() {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

# Ensure required environment variables are set
if [[ -z "$GITLAB_TOKEN" ]]; then
    echo "Error: GITLAB_TOKEN environment variable is not set"
    exit 1
fi

# Check if both variables are set
if [[ -z "$GIT_USER_NAME" || -z "$GIT_USER_EMAIL" ]]; then
    echo "Error: Both GIT_USER_NAME and GIT_USER_EMAIL must be set in environment variables."
    exit 1
fi

# Setting git configuration
git config --global --add safe.directory "${CI_PROJECT_DIR}"

allow="all"
branch="main"
branchName="bit-dependency-update"
commitMessage="Update Bit envs, outdated (direct) external dependencies, and workspace components according to the defined CI task parameter --allow"
mrTitle="Update bit dependencies"
mrBody="This MR updates the bit dependencies."
componentPatterns=""
envPatterns=""
packagePatterns=""
versionUpdatePolicy=""

# Extract the parameters
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        --allow)
        allow="$2"
        shift  # past argument
        shift  # past value
        ;;
        --branch)
        branch="$2"
        shift  # past argument
        shift  # past value
        ;;
        --component-patterns)
        componentPatterns="$2"
        shift  # past argument
        shift  # past value
        ;;
        --env-patterns)
        envPatterns="$2"
        shift  # past argument
        shift  # past value
        ;;
        --package-patterns)
        packagePatterns="$2"
        shift  # past argument
        shift  # past value
        ;;
        --version-update-policy)
        versionUpdatePolicy="$2"
        shift  # past argument
        shift  # past value
        ;;
        *)
        # Unknown option
        shift # past argument
        ;;
    esac
done

echo "Allow: $allow"
echo "Branch: $branch"
echo "Component Patterns: ${componentPatterns:-"not provided"}"
echo "Env Patterns: ${envPatterns:-"not provided"}"
echo "Package Patterns: ${packagePatterns:-"not provided"}"
echo "Version Update Policy: ${versionUpdatePolicy:-"not provided"}"

# Convert the comma-separated string into an array.
IFS=',' read -ra allowArray <<< "$allow"

if contains "all" "${allowArray[@]}" || contains "workspace-components" "${allowArray[@]}"; then
    bit checkout head --all "${componentPatterns}"
    echo "Updating workspace-components"
fi

if contains "all" "${allowArray[@]}" || contains "envs" "${allowArray[@]}"; then
    bit envs update "${envPatterns}"
    echo "Updating env-components"
fi

if contains "all" "${allowArray[@]}" || contains "external-dependencies" "${allowArray[@]}"; then
    semverOption=""
    if [[ -n "$versionUpdatePolicy" ]]; then
        semverOption="--${versionUpdatePolicy}"
    fi
    bit update -y ${semverOption} "${packagePatterns}"
    echo "Updating external dependencies"
fi

# Check git status
statusOutput=$(git status --porcelain)

# If there's any change
if [ -n "$statusOutput" ]; then
    echo "Found modified components or dependencies"
    # Setting git configuration
    git config --global user.name "${GIT_USER_NAME}"
    git config --global user.email "${GIT_USER_EMAIL}"
   
    git checkout -b "${branchName}"
    git add .
    git commit -m "${commitMessage}"

    REPO_URL="https://gitlab-ci-token:${GITLAB_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git"
    git push "${REPO_URL}" "${branchName}" --force

    # Create a merge request using GitLab API with curl
    MR_RESPONSE=$(curl --request POST \
                        --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
                        --header "Content-Type: application/json" \
                        --data '{
                            "id": "'"$CI_PROJECT_ID"'",
                            "source_branch": "'"$branchName"'",
                            "target_branch": "'"$branch"'",
                            "title": "'"$mrTitle"'",
                            "description": "'"$mrBody"'"
                        }' \
                        "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests")

    MR_WEB_URL=$(echo "$MR_RESPONSE" | jq -r '.web_url')

    # Check if MR was created successfully
    if [ "$MR_WEB_URL" != "null" ]; then
        echo "Merge request created successfully: $MR_WEB_URL"
    else
        ERROR_MESSAGE=$(echo "$MR_RESPONSE" | jq -r '.message')
        echo "Error creating merge request: $ERROR_MESSAGE"
        exit 1
    fi
fi
