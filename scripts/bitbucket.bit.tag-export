#!/bin/bash

# Load variables from ws.env file
source /tmp/ws.env

# Check if $BIT_CONFIG_ACCESS_TOKEN is set
if [ -z "$BIT_CONFIG_USER_TOKEN" ] && [ -z "$BIT_CONFIG_ACCESS_TOKEN" ]; then
    echo "Error: BIT_CONFIG_ACCESS_TOKEN repository variable secret is not set. It is required!"
    exit 1
fi

# Assign BIT_CONFIG_ACCESS_TOKEN to BIT_CONFIG_USER_TOKEN
if [ -z "$BIT_CONFIG_USER_TOKEN" ]; then
    BIT_CONFIG_USER_TOKEN="$BIT_CONFIG_ACCESS_TOKEN"
    export BIT_CONFIG_USER_TOKEN
fi

# Ensure Bitbucket access token is set for Bitbucket API calls
if [ -z "$BITBUCKET_ACCESS_TOKEN" ]; then
    echo "Error: BITBUCKET_ACCESS_TOKEN repository variable secret is required for Bitbucket API calls."
    exit 1
fi

# Setting git configuration
git config --global --add safe.directory /opt/atlassian/pipelines/agent/build
git config --global user.name "$GIT_USER_NAME"
git config --global user.email "$GIT_USER_EMAIL"

# Retrieve the last commit hash
commit_sha=$(git rev-parse HEAD)

# Attempt to fetch associated PR details using Bitbucket API with BITBUCKET_ACCESS_TOKEN
response=$(curl -s -H "Authorization: Bearer $BITBUCKET_ACCESS_TOKEN" \
    "https://api.bitbucket.org/2.0/repositories/$BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG/commit/$commit_sha/pullrequests")

# Parse the response to find the PR ID
PR_ID=$(echo "$response" | jq -r '.values[0].id // empty')

if [[ -z "$PR_ID" ]]; then
    echo "No Pull Request found for the last commit ($commit_sha). Proceeding without PR-specific actions."
else
    echo "Found Pull Request ID: $PR_ID"
fi

# Extract version information from commit or PR
keywords=("patch" "major" "minor" "pre-release")
version="Unknown"

# If a PR was found, attempt to extract version information from PR title
if [[ -n "$PR_ID" ]]; then
    PR_DETAILS=$(curl -s -H "Authorization: Bearer $BITBUCKET_ACCESS_TOKEN" \
        "https://api.bitbucket.org/2.0/repositories/$BITBUCKET_WORKSPACE/$BITBUCKET_REPO_SLUG/pullrequests/$PR_ID")
    
    PR_TITLE=$(echo "$PR_DETAILS" | jq -r '.title')
    for keyword in "${keywords[@]}"; do
      if [[ "$PR_TITLE" == *"[${keyword}]"* ]]; then
          version="$keyword"
          break
      fi
    done
fi

# Fallback to commit message if version is still unknown
if [[ "$version" == "Unknown" ]]; then
    COMMIT_MESSAGE=$(git log -1 --pretty=%B)
    for keyword in "${keywords[@]}"; do
      if [[ "$COMMIT_MESSAGE" == *"[${keyword}]"* ]]; then
        version="$keyword"
        break
      fi
    done
fi

# Display the determined version
echo "Determined Version: $version"

# Construct the Bit command
command="bit tag -m 'CI' --build"

if [[ "$version" != "Unknown" ]]; then
  command+=" --$version"
fi

if [[ " $@ " == *"--persist"* ]]; then
    command+=" --persist"
fi

# Run the Bit command
echo "Executing: $command"
$command
bit export
