#!/bin/bash

# Load variables from ws.env file
source /tmp/ws.env

# Configure git safe directory
git config --global --add safe.directory /builds/bit-tasks/ci

# Check environment variable for GitLab token
if [[ -z "$GITLAB_TOKEN" ]]; then
    echo "Error: GITLAB_TOKEN environment variable is required."
    exit 1
fi

# Verify if CI_PROJECT_ID is set
if [[ -z "$CI_PROJECT_ID" ]]; then
    echo "Error: Run this task in GitLab."
    exit 1
fi

# Retrieve the MR ID from the latest commit
commit_sha=$(git rev-parse HEAD)
response=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/repository/commits/$commit_sha/merge_requests")

# Check the API call for MR retrieval
if [[ $? -ne 0 ]]; then
    echo "Error: Failed to fetch data from GitLab API for commit: $commit_sha."
    exit 1
fi

if echo "$response" | jq '. | type' | grep -q "array" && [[ "$(echo "$response" | jq 'length')" -gt 0 ]]; then
    MR_ID=$(echo "$response" | jq '.[0].iid')
else
    MR_ID=""
fi

# Extract version information from commit or MR
keywords=("patch" "major" "minor" "pre-release")
version="Unknown"

if [[ -n "$MR_ID" ]]; then
    MR_DETAILS=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests/$MR_ID")
    
    MR_TITLE=$(echo "$MR_DETAILS" | jq -r '.title')
    MR_LABELS=$(echo "$MR_DETAILS" | jq -r '.labels[]')

    for label in $MR_LABELS; do
      if [[ " ${keywords[*]} " == *"$label"* ]]; then
          version="$label"
          break
      fi
    done

    if [[ "$version" == "Unknown" ]]; then
      for keyword in "${keywords[@]}"; do
        if [[ "$MR_TITLE" == *"[${keyword}]"* ]]; then
          version="$keyword"
          break
        fi
      done
    fi
fi

if [[ "$version" == "Unknown" ]]; then
    COMMIT_MESSAGE=$(git log -1 --pretty=%B)
    for keyword in "${keywords[@]}"; do
      if [[ "$COMMIT_MESSAGE" == *"[${keyword}]"* ]]; then
        version="$keyword"
        break
      fi
    done
fi

# Display the determined version
echo "Determined Version: $version"

command="bit tag -m 'CI' --build"

if [[ "$version" != "Unknown" ]]; then
  command+=" --$version"
fi

# Run the Bit command
echo "Executing: $command"
$command
bit export
