#!/bin/bash

# Load variables from ws.env file
source /tmp/ws.env

# Check if $BIT_CONFIG_ACCESS_TOKEN is set
if [ -z "$BIT_CONFIG_USER_TOKEN" ] && [ -z "$BIT_CONFIG_ACCESS_TOKEN" ]; then
    echo "Error: BIT_CONFIG_ACCESS_TOKEN repository variable secret is not set. It is required!"
    exit 1
fi

# Assign BIT_CONFIG_ACCESS_TOKEN to BIT_CONFIG_USER_TOKEN
if [ -z "$BIT_CONFIG_USER_TOKEN" ]; then
    BIT_CONFIG_USER_TOKEN="$BIT_CONFIG_ACCESS_TOKEN"
    export BIT_CONFIG_USER_TOKEN
fi

# Disable git terminal prompt to prevent the script from getting stuck waiting for input
export GIT_TERMINAL_PROMPT=0

# Check if both variables are set
if [ -z "$GIT_USER_NAME" ] || [ -z "$GIT_USER_EMAIL" ]; then
    echo "Error: Both GIT_USER_NAME and GIT_USER_EMAIL must be set in repository variables."
    exit 1
fi

# Setting git configuration
git config --global user.name "$GIT_USER_NAME"
git config --global user.email "$GIT_USER_EMAIL"

# Assign values from environment variables or use default values
allow="${BIT_ALLOW:-all}"
branch="${BIT_BRANCH:-main}"
branchName="${BIT_BRANCH_NAME:-bit-dependency-update}"
commitMessage="${BIT_COMMIT_MESSAGE:-Update Bit envs, outdated (direct) external dependencies, and workspace components according to the defined CI task parameter --allow}"
prTitle="${BIT_PR_TITLE:-Update bit dependencies}"
prBody="${BIT_PR_BODY:-This PR updates the bit dependencies.}"
componentPatterns="${BIT_COMPONENT_PATTERNS:-""}"
envPatterns="${BIT_ENV_PATTERNS:-""}"
packagePatterns="${BIT_PACKAGE_PATTERNS:-""}"
versionUpdatePolicy="${BIT_VERSION_UPDATE_POLICY:-""}"

echo "Allow: $allow"
echo "Branch: $branch"
echo "Component Patterns: ${componentPatterns:-"not provided"}"
echo "Env Patterns: ${envPatterns:-"not provided"}"
echo "Package Patterns: ${packagePatterns:-"not provided"}"
echo "Version Update Policy: ${versionUpdatePolicy:-"not provided"}"

# Convert the comma-separated string into an array.
IFS=',' read -ra allowArray <<< "$allow"

if contains "all" "${allowArray[@]}" || contains "workspace-components" "${allowArray[@]}"; then
    bit checkout head --all "${componentPatterns}"
    echo "Updating workspace-components"
fi

if contains "all" "${allowArray[@]}" || contains "envs" "${allowArray[@]}"; then
    bit envs update "${envPatterns}"
    echo "Updating env-components"
fi

if contains "all" "${allowArray[@]}" || contains "external-dependencies" "${allowArray[@]}"; then
    semverOption=""
    if [[ -n "$versionUpdatePolicy" ]]; then
        semverOption="--${versionUpdatePolicy}"
    fi
    bit update -y ${semverOption} "${packagePatterns}"
    echo "Updating external dependencies"
fi

# Check git status
statusOutput=$(git status --porcelain)

# If there's any change
if [ -n "$statusOutput" ]; then
    echo "Found modified components or dependencies"
   
    git checkout -b "$branchName"
    git add .
    git commit -m "$commitMessage"

    # Push changes to the new branch
    git push origin "$branchName"

    # Create a pull request using Bitbucket API
    accessToken="$BITBUCKET_ACCESS_TOKEN" # Ensure this is set in your Bitbucket pipeline variables
    workspace="$BITBUCKET_WORKSPACE"
    repoSlug="$BITBUCKET_REPO_SLUG"

    createPRResponse=$(curl -s -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $accessToken" \
        -d "{
            \"title\": \"$prTitle\",
            \"source\": {
                \"branch\": {
                    \"name\": \"$branchName\"
                }
            },
            \"destination\": {
                \"branch\": {
                    \"name\": \"$branch\"
                }
            },
            \"description\": \"$prBody\"
        }" \
        "https://api.bitbucket.org/2.0/repositories/$workspace/$repoSlug/pullrequests")

    prLink=$(echo "$createPRResponse" | jq -r '.links.html.href')
    prId=$(echo "$createPRResponse" | jq -r '.id')

    if [ "$prId" != "null" ]; then
        echo "Pull request created successfully: $prLink"
    else
        echo "Failed to create pull request"
        echo "$createPRResponse"
        exit 1
    fi
else
    echo "No changes detected, skipping pull request creation."
fi
